#Name: Mathew Soto
#Date: 12/30/18

#This program is a two player game of tic tac toe where the users enter into the console numbers
#which correspond to the box they want to play, then the end game result is shown in the console
#and the user can exit out of the graphics window with a click

#this is a personal project not connected to schoolwork, and I would like to be able to modify this
#even further so that the user can click on the graphics window to indicate which box they want to
#play, so I will continue to edit this in the future

import turtle

ted=turtle.Turtle() #sets up turtle
w=turtle.Screen()   #sets up turtle graphics screen
ted.hideturtle()    
ted.speed(150)      #increase the speed for quick setup

def drawlines():
    #draws the lines of the tic_tac_toe grid
    ted.penup()
    
    #the next four lines draw the left vertical line
    ted.goto(-150,-300)
    ted.left(90)         
    ted.pendown()
    ted.forward(600)     
    
    ted.penup()
    
    #the next three lines draw the right vertical line
    ted.goto(150,-300)  
    ted.pendown()
    ted.forward(600)
    
    ted.penup()
    
    #the next four lines draw the upper horizontal line
    ted.goto(-400,100)
    ted.right(90)
    ted.pendown()
    ted.forward(800)
    
    ted.penup()
    
    #the next three lines draw the lower horizontal line
    ted.goto(-400,-100)
    ted.pendown()
    ted.forward(800)

def drawanO():
    #draws an O slightly smaller than the size of a box in the tic tac toe grid
    ted.right(135)
    ted.penup()
    ted.forward(75)
    ted.pendown()
    ted.left(90)
    ted.circle(75)

def drawanX():
    #draws an X slightly smaller than the size of a box in the tic tac toe grid
    ted.left(45)
    for i in range(4):
        ted.forward(90)
        ted.backward(90)
        ted.right(90)

xlist=[] #initializes a list to take in the numbers of the boxes entered by the user playing for X
olist=[] #initializes a list to take in the numbers of the boxes entered by the user playing for O

#the next six functions test if the lists contain numbers which indicate that either X or O has won
#each function returns True if a win condition has not been met and False if a win condition has been met
#this is so that the while loop which determines whether or not the game will continue continues if no one
#has won and stops if someone has won

def win1x():
    #tests if x has won using the box on the upper left hand corner
    if 1 in xlist:
        if 2 in xlist: 
            if 3 in xlist:
                #x has won on the top row
                return False
            else:
                return True
        elif 4 in xlist:
            if 7 in xlist:
                #x has won on the left column
                return False
            else:
                return True
        elif 5 in xlist:
            if 9 in xlist:
                #x has won on the upper left hand to lower right hand diagonal
                return False
            else:
                return True
        else:
            return True
    else:
        return True
    
def win5x():
    #tests if x has won using the middle box
    if 5 in xlist:
        if 4 in xlist:
            if 6 in xlist:
                #x has won using the middle row
                return False
            else:
                return True
        elif 2 in xlist:
            if 8 in xlist:
                #x has won using the middle column
                return False
            else:
                return True
        elif 3 in xlist:
            if 7 in xlist:
                #x has won using the lower left hand to upper right hand diagonal
                return False
            else:
                return True
        else:
            return True
    else:
        return True
    
def win9x():
    #tests if x has won using the box on the lower right hand corner
    if 9 in xlist:
        if 7 in xlist:
            if 8 in xlist:
                #x has won using the bottom row
                return False
            else:
                return True
        elif 3 in xlist:
            if 6 in xlist:
                #x has won using the right column
                return False
            else:
                return True
        else:
            return True
    else:
        return True

def win1o():
    #tests if O has won using the box on the upper left hand corner
    if 1 in olist:
        if 2 in olist: 
            if 3 in olist:
                #o has won using the top row
                return False
            else:
                return True
        elif 4 in olist:
            if 7 in olist:
                #o has won using the left column
                return False
            else:
                return True
        elif 5 in olist:
            if 9 in olist:
                #o has won using the upper left hand to lower right hand diagonal
                return False
            else:
                return True
        else:
            return True
    else:
        return True

def win5o():
    #tests if O has won using the middle box
    if 5 in olist:
        if 4 in olist:
            if 6 in olist:
                #o has won using the middle row
                return False
            else:
                return True
        elif 2 in olist:
            if 8 in olist:
                #o has won using the middle column
                return False
            else:
                return True
        elif 3 in olist:
            if 7 in olist:
                #o has won using the lower left hand to upper right hand diagonal
                return False
            else:
                return True
        else:
            return True
    else:
        return True

def win9o():
    #tests if 0 has won using the box in the lower right corner
    if 9 in olist:
        if 7 in olist:
            if 8 in olist:
                #o has won using the bottom row
                return False
            else:
                return True
        elif 3 in olist:
            if 6 in olist:
                #o has won using the right column
                return False
            else:
                return True
        else:
            return True
    else:
        return True

def tic_tac_toe():
    #this function takes in user input and continues the games as long as no one has won or until 
    #all boxes have been filled
    
    y=0 #initializes a variable which will increment by 1 each time a user inputs a number
    
    #initializes a list containing the numbers one through nine as strings to
    #make sure the user input is one of these numbers
    available=["1","2","3","4","5","6","7","8","9"]
    
    while win1x() and win5x() and win9x() and win1o() and win5o() and win9o() and y<9:
        #the six win conditions will all return true as long as no one has won
        #this while loop stops when y equals 9, because that indicates that 9 moves
        #have been played and the board at this point is full
        
        #the user must input their desired number in the console
        number=input("Enter a number between 1 and 9: ")
        
        while not number in available:
            #continues to ask, more nicely this time, to enter a number from one to nine
            number=input("Please enter an integer between 1 and 9: ")
            
        #takes out the most recent user input from available to make sure that the
        #same box is not entered twice
        available.remove(number)
        
        #when y is even, x plays, ensuring that x will have five plays and o will have four plays
        if y%2==0:
            #this draws an x in the box corresponding to the number the user entered
            if int(number)==1:
                ted.penup()
                ted.goto(-275,200)
                ted.pendown()
                drawanX()
                xlist.append(1)
            elif int(number)==2:
                ted.penup()
                ted.goto(0,200)
                ted.pendown()
                drawanX()
                xlist.append(2)
            elif int(number)==3:
                ted.penup()
                ted.goto(275,200)
                ted.pendown()
                drawanX()
                xlist.append(3)
            elif int(number)==4:
                ted.penup()
                ted.goto(-275,0)
                ted.pendown()
                drawanX()
                xlist.append(4)
            elif int(number)==5:
                ted.penup()
                ted.goto(0,0)
                ted.pendown()
                drawanX()
                xlist.append(5)
            elif int(number)==6:
                ted.penup()
                ted.goto(275,0)
                ted.pendown()
                drawanX()
                xlist.append(6)
            elif int(number)==7:
                ted.penup()
                ted.goto(-275,-200)
                ted.pendown()
                drawanX()
                xlist.append(7)
            elif int(number)==8:
                ted.penup()
                ted.goto(0,-200)
                ted.pendown()
                drawanX()
                xlist.append(8)
            elif int(number)==9:
                ted.penup()
                ted.goto(275,-200)
                ted.pendown()
                drawanX()
                xlist.append(9)
        #when y is odd, o plays
        else:
            #this draws an o in the box corresponding to the number the user entered
            if int(number)==1:
                ted.penup()
                ted.goto(-275,200)
                ted.pendown()
                drawanO()
                olist.append(1)
            elif int(number)==2:
                ted.penup()
                ted.goto(0,200)
                ted.pendown()
                drawanO()
                olist.append(2)
            elif int(number)==3:
                ted.penup()
                ted.goto(275,200)
                ted.pendown()
                drawanO()
                olist.append(3)
            elif int(number)==4:
                ted.penup()
                ted.goto(-275,0)
                ted.pendown()
                drawanO()
                olist.append(4)
            elif int(number)==5:
                ted.penup()
                ted.goto(0,0)
                ted.pendown()
                drawanO()
                olist.append(5)
            elif int(number)==6:
                ted.penup()
                ted.goto(275,0)
                ted.pendown()
                drawanO()
                olist.append(6)
            elif int(number)==7:
                ted.penup()
                ted.goto(-275,-200)
                ted.pendown()
                drawanO()
                olist.append(7)
            elif int(number)==8:
                ted.penup()
                ted.goto(0,-200)
                ted.pendown()
                drawanO()
                olist.append(8)
            elif int(number)==9:
                ted.penup()
                ted.goto(275,-200)
                ted.pendown()
                drawanO()
                olist.append(9)
        y+=1 #increments y to make sure the players alternate and that a maximum of nine moves are played

def endgame():    
    #prints to the console the end result of the game
    if not win1x():
        print("X has won!")
    elif not win5x():
        print("X has won!")
    elif not win9x():
        print("X has won!")
    elif not win1o():
        print("O has won!")
    elif not win5o():
        print("O has won!")
    elif not win9o():
        print("O has won!")
    else:
        print("The game is a tie")
    
def main():
    drawlines() #draws the grid
    
    #prints to the console some instructions to the user
    print("The 9 boxes of the tic tac toe grid are labelled with the numbers 1-9, from left to right")
    print("and up to down, so that the upper left box is '1' and the lower right box is '9'")
    print("X goes first")
    
    ted.speed(100)
    tic_tac_toe() #calls the function which prompts user input and manages the game
    endgame() #prints the end result
    w.exitonclick() #exits graphics window when user clicks on the window
    
if __name__ == '__main__':
    main()
