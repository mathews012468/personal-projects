#Name: Mathew Soto
#Date: 3/10/19

#I would eventually like to make a program that solves any given sudoku puzzle, but as of right now this program tests
#to see if a given sudoku puzzle is in a legal position, that is that it has the numbers one through nine in every row,
#column, and three by three box at most once 

grid = []

def appears_once(varib): 
    #this function makes sure that a value does not appear more than once in a list
    num1 = 0
    for i in range(len(varib)):
        for j in range(len(varib)):
            if i != j:
                if varib[i] == varib[j]:
                    num1 += 1
    if num1 == 0:
        return False
    else:
        return True
                
def test_horizontal():
    #this function tests if all of the horizontal lines contain the values from 1 to 9 at most once
    num2 = 0
    empty = []
    for i in range(9):
        for j in range(9):
            if grid[9*i+j] != 0:
                empty.append(grid[9*i+j])
        if appears_once(empty):
            num2 += 1
        empty = []
    if num2 == 0:
        return True
    else:
        return False
    
def test_vertical():
    #this function tests if all of the vertical lines contain the values from 1 to 9 at most once
    num3 = 0
    empty = []
    for i in range(9):
        for j in range(9):
            if grid[9*j+i] != 0:
                empty.append(grid[9*j+i])
        if appears_once(empty):
            num3 += 1
        empty = []
    if num3 == 0:
        return True
    else:
        return False

#the next nine functions do the same thing as the test_horizontal() and test_vertical() functions, 
#except they do it for the nine 3X3 boxes in the sudoku puzzle. 
#The names of the functions indicate exactly which box each function is meant to test

def test_upperleft():
    empty = []
    numlist = [grid[0], grid[1], grid[2], grid[9], grid[10], grid[11], grid[18], grid[19], grid[20]]
    
    for i in range(9):
        if numlist[i] != 0:
            empty.append(numlist[i])
    if appears_once(empty):
        return False
    else:
        return True
    
def test_uppermiddle():
    empty = []
    numlist = [grid[3], grid[4], grid[5], grid[12], grid[13], grid[14], grid[21], grid[22], grid[23]]
    
    for i in range(9):
        if numlist[i] != 0:
            empty.append(numlist[i])
    if appears_once(empty):
        return False
    else:
        return True

def test_upperright():
    empty = []
    numlist = [grid[6], grid[7], grid[8], grid[15], grid[16], grid[17], grid[24], grid[25], grid[26]]
    
    for i in range(9):
        if numlist[i] != 0:
            empty.append(numlist[i])
    if appears_once(empty):
        return False
    else:
        return True

def test_middleleft():
    empty = []
    numlist = [grid[27], grid[28], grid[29], grid[36], grid[37], grid[38], grid[45], grid[46], grid[47]]
    
    for i in range(9):
        if numlist[i] != 0:
            empty.append(numlist[i])
    if appears_once(empty):
        return False
    else:
        return True

def test_middlemiddle():
    empty = []
    numlist = [grid[30], grid[31], grid[32], grid[39], grid[40], grid[41], grid[48], grid[49], grid[50]]
    
    for i in range(9):
        if numlist[i] != 0:
            empty.append(numlist[i])
    if appears_once(empty):
        return False
    else:
        return True
    
def test_middleright():
    empty = []
    numlist = [grid[33], grid[34], grid[35], grid[42], grid[43], grid[44], grid[51], grid[52], grid[53]]
    
    for i in range(9):
        if numlist[i] != 0:
            empty.append(numlist[i])
    if appears_once(empty):
        return False
    else:
        return True
    
def test_bottomleft():
    empty = []
    numlist = [grid[54], grid[55], grid[56], grid[63], grid[64], grid[65], grid[72], grid[73], grid[74]]
    
    for i in range(9):
        if numlist[i] != 0:
            empty.append(numlist[i])
    if appears_once(empty):
        return False
    else:
        return True
    
def test_bottommiddle():
    empty = []
    numlist = [grid[57], grid[58], grid[59], grid[66], grid[67], grid[68], grid[75], grid[76], grid[77]]
    
    for i in range(9):
        if numlist[i] != 0:
            empty.append(numlist[i])
    if appears_once(empty):
        return False
    else:
        return True
    
def test_bottomright():
    empty = []
    numlist = [grid[60], grid[61], grid[62], grid[69], grid[70], grid[71], grid[78], grid[79], grid[80]]
    
    for i in range(9):
        if numlist[i] != 0:
            empty.append(numlist[i])
    if appears_once(empty):
        return False
    else:
        return True
    
def test_3x3box():
    #combines the outputs of the previous nine functions
    #only returns True if all of the 3x3 boxes are valid
    if test_upperleft() and test_uppermiddle() and test_upperright():
        if test_middleleft() and test_middlemiddle() and test_middleright():
            if test_bottomleft() and test_bottommiddle() and test_bottomright():
                return True
            else:
                return False
        else:
            return False
    else:
        return False
    
def test_grid():
    #combines the outputs of all of the test functions
    #only returns True if the sudoku puzzle is valid
    if test_3x3box() and test_vertical() and test_horizontal():
        return True
    else:
        return False

def draw_box():
    #draws the sudoku puzzle with all the entered values, where empty boxes are indicated by the value 0
    for i in range(9):
        for j in range(9):
            print(grid[9*i+j], end = ' ')
        print()

def user_input_value(sud):
    #makes sure the user input for the value of an individual square in the puzzle is valid, 
    #between 1 and 9
    if sud.isdigit() == True:
        if 0 < int(sud) < 10:
            return False
        else:
            return True
    else:
        return True
        
def user_input_rc(yer):
    #makes sure the user input for the row and column are valid, between 0 and 8
    if yer.isdigit() == False:
        return True
    elif 0 <= int(yer) < 9:
        return False
    else:
        return True

def improve_user():
    #takes in all user input until the user decides to stop entering valid values
    #this also updates the grid with the input from the user
    sud_num = input("Enter a number between 1 and 9: ")
    
    while user_input_value(sud_num) == True:
        sud_num = input("Enter a number between 1 and 9: ")
        
    while user_input_value(sud_num) == False:
        row = input("Enter the row of the square whose value you entered: ")
        while user_input_rc(row):
            row = input("Enter the row of the square whose value you entered: ")
        
        column = input("Enter the column of the square whose value you entered: ")
        while user_input_rc(column):
            column = input("Enter the column of the square whose value you entered: ")
        
        grid[int(row)*9 + int(column)] = int(sud_num)
        
        print()
        
        draw_box()
        
        sud_num = input("Enter a number between 1 and 9: ")

def initialize_grid():
    for i in range(81):
        grid.append(0)
        
def main():
    initialize_grid()
    
    print("Input the numbers you see on your sudoku puzzle")
    print("After inputting the number, enter a value between 0 and 8 for the row and column of the number")
    print("The 0th row is the top, and the 0th column is on the left")
    
    improve_user()

    print()
    
    print(test_grid())

if __name__ == "__main__":
    main()
